@using EGHeals.Models.Dtos.Examinations

<TableUI T="ExaminationResponseDto"
         IsInitialLoading="IsInitialLoading"
         IsRefreshing="IsRefreshing"
         HasData="hasData"
         SkeletonRows="6"
         SkeletonColumns="5">
    <ColumnsDefinitions>
        <colgroup>
    <col />
    <col />
    <col />
    <col />
    <col style="width: 5rem">
    </colgroup>
    </ColumnsDefinitions>
    <HeaderTemplate>
        <TableRowUI>
            <TableHeaderUI>Examination</TableHeaderUI>
            <TableHeaderUI>Device</TableHeaderUI>
            <TableHeaderUI>Description</TableHeaderUI>
            <TableHeaderUI>Cost</TableHeaderUI>
            <TableHeaderUI></TableHeaderUI>
        </TableRowUI>
    </HeaderTemplate>
    <RowTemplate>
        @foreach (var examination in Examinations ?? Enumerable.Empty<ExaminationResponseDto>())
        {
            <TableRowUI>
                <TableDataUI>@examination.Name</TableDataUI>
                <TableDataUI>@examination.Device</TableDataUI>
                <TableDataUI>@examination.Description</TableDataUI>
                <TableDataUI>@examination.Cost</TableDataUI>
                <TableDataUI>
                    <IconButtonUI Icon="fa-solid fa-ellipsis-vertical" Size="2.3"/>
                </TableDataUI>
            </TableRowUI>
        }
    </RowTemplate>
</TableUI>

@code{

    private IEnumerable<ExaminationResponseDto>? Examinations;
    private bool IsInitialLoading { get; set; } = false;
    private bool IsRefreshing { get; set; } = false;
    private bool hasData => Examinations != null && Examinations.Any();

    protected override async Task OnInitializedAsync()
    {
        IsInitialLoading = true;

        await Task.Delay(2000);

        var users = new List<ExaminationResponseDto>();

        for (int i = 1; i <= 100; i++)
        {
            users.Add(new ExaminationResponseDto
            {
                Id = Guid.NewGuid(),
                Name = i == 1 ? "ahmed abdou farhan mohhamed mohammed khaled": $"Examination {i}",
                Device = $"Device Name",
                Description = $"Description {i}",
                Cost = i
            });
        }

        Examinations = await Task.FromResult(users);

        IsInitialLoading = false;
    }
}