@using EGHeals.Components.Security
@inject AuthenticationStateProvider AuthStateProvider

<div class="page-content">
    <div>
        <button @onclick="@Logout">Logout</button>
    </div>
    <TableUI T="User"
             IsInitialLoading="IsInitialLoading"
             IsLoading="IsRefreshing"
             HasData="hasData"
             SkeletonRows="6"
             SkeletonColumns="3">
        <HeaderTemplate>
            <TableRowUI>
                <TableHeaderUI>ID</TableHeaderUI>
                <TableHeaderUI>Name</TableHeaderUI>
                <TableHeaderUI>Email</TableHeaderUI>
            </TableRowUI>
        </HeaderTemplate>
        <RowTemplate>
            @foreach (var user in Users ?? Enumerable.Empty<User>())
            {
                <TableRowUI>
                    <TableDataUI>@user.Id</TableDataUI>
                    <TableDataUI>@user.Name</TableDataUI>
                    <TableDataUI>@user.Email</TableDataUI>
                </TableRowUI>
            }
        </RowTemplate>
    </TableUI>
    <SkeltonLoadingContainer IsLoading="IsInitialLoading">
        <Skeleton>
            <PaginationSkeletonComponent />
        </Skeleton>
        <ChildContent>
            <PaginationUI TotalPages="20" Page="5" />
        </ChildContent>
    </SkeltonLoadingContainer>
</div>

@code {

    private bool IsInitialLoading { get; set; } = false;
    private bool IsRefreshing { get; set; } = false;
    private bool hasData => Users != null && Users.Any();
    private IEnumerable<User>? Users;

    protected override async Task OnInitializedAsync()
    {
        IsInitialLoading = true;

        await Task.Delay(5000);

        IsInitialLoading = false;

        var users = new List<User>();

        for (int i = 1; i <= 50; i++)
        {
            users.Add(new User
            {
                Id = i,
                Name = $"User {i}",
                Email = $"user{i}@example.com"
            });
        }

        Users = await Task.FromResult(users);

        StateHasChanged();

        await Task.Delay(5000);

        IsRefreshing = true;

        StateHasChanged();

        await Task.Delay(5000);

        IsRefreshing = false;

        StateHasChanged();
    }

    private void Logout()
    {
        (AuthStateProvider as CustomAuthStateProvider)?.NotifyUserLogout();
    }

    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
    }
}