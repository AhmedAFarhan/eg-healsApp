@using EGHeals.Models.Dtos.Users
@using EGHeals.Models.Dtos.Users.Responses

@inject NavigationManager NavigationManager
@inject ModalPopupService ModalPopupService
@inject MessageBoxService MessageBoxService
@inject TaskHandlerService TaskHandlerService

<GridCardUI OnPrimaryAction="@OnToggleActivationHandler" PrimaryActionText="Activate">
    <PopupActions>
        <GridCardContextPopupActionUI Text="Permissions" Icon="fa-regular fa-universal-access" OnClick="@OnShowPermissionsHandler" />
        <GridCardContextPopupActionUI Text="Edit" Icon="fa-regular fa-pen-to-square" OnClick="@OnEditUserHandler" />
        <GridCardContextPopupActionUI Text="Delete" Icon="fa-regular fa-trash-xmark" OnClick="@OnDeleteUserHandler" />
    </PopupActions>
    <ChildContent>
        <div class="user">
            <CardActivationFlipperUI IsFlipped="@isFlipped">
                <i class="fa-solid fa-user user__icon"></i>
            </CardActivationFlipperUI>
            <div class="user__username">@User.Username</div>
            <div class="user__roles-container">
                <div class="user__role-title">Roles : </div>
                <ul class="user__roles">
                    @foreach (var role in User.UserRoles)
                    {
                        <li class="user__role">@role.RoleName</li>
                    }
                </ul>
            </div>
        </div>
    </ChildContent>
</GridCardUI>

@code{

    private bool isFlipped = false;

    [Parameter] public bool InInit { get; set; } = false;

    [Parameter] public SubUserResponseDto User { get; set; } = default!;

    private async Task DeleteUserAsync()
    {
        await Task.Delay(2000);
    }

    private void OnDeleteUserHandler()
    {
        //Show popup telling admin to select the sub user roles
        // MessageBoxService.Show(title: "Delete Sub-User",
        //                        description: "Are you sure from deleting this user ?",
        //                        msgBoxType: MsgBoxType.WARNING,
        //                        btnText: "Delete",
        //                        action: () => DeleteUserAsync());
    }

    private void OnShowPermissionsHandler()
    {
        NavigationManager.NavigateTo($"/user-roles/{User.Id}");
    }

    private void OnToggleActivationHandler()
    {
        isFlipped = !isFlipped;
    }

    private void OnEditUserHandler()
    {
        // ModalPopupService.Show(builder =>
        // {
        //     builder.OpenComponent<UpdateSubUserFormComponent>(0);
        //     builder.CloseComponent();
        // }, "Edit Sub-User", "Modify the details of an existing sub-user.");
    }
}