@using EGHeals.Components.Identity
@using EGHeals.Models.Enums
@using EGHeals.Models.Models.Users

<GridCardUI CardClass="@(Model.IsSelected? GetVariantActiveCard() : string.Empty)"
            OnPrimaryAction="@OnToggleActivationHandler"
            PrimaryActionText="@Model.ActivationBtnText"
            PrimaryActionIcon="@Model.ActivationBtnIcon"
            OnSecondaryAction="OnShowPermissionsHandler"             
            SecondaryActionText="Permissions"
            SecondaryActionIcon="fa-regular fa-universal-access">

    <div class="role">
        @if (RoleDefinition.Receptionist == Model.Name)
        {
            <CardActivationFlipperUI IsFlipped="@Model.IsActive" ActiveColor="ApplicationColor.PRIMARY">
                <ReceptionistIcon />
            </CardActivationFlipperUI>
        }
        else if (RoleDefinition.Radiologist == Model.Name)
        {
            <CardActivationFlipperUI IsFlipped="@Model.IsActive" ActiveColor="ApplicationColor.SECONDARY">
                <RadiologistIcon ContainerClass="role__svg-radiologist-container" />
            </CardActivationFlipperUI>
        }
        else if (RoleDefinition.Accountant == Model.Name)
        {
            <CardActivationFlipperUI IsFlipped="@Model.IsActive" ActiveColor="ApplicationColor.TERTIARY">
                <AccountantIcon ContainerClass="role__svg-accountant-container" />
            </CardActivationFlipperUI>
        }
        <div class="role__name">@Model.Name</div>
    </div>

</GridCardUI>

@code {

    [Parameter] public RoleModel Model { get; set; } = default!;

    [Parameter] public EventCallback<RoleModel> OnShowPermissions { get; set; }

    [Parameter] public EventCallback OnActivationChanged { get; set; }

    private void OnToggleActivationHandler()
    {
        // Toggle role activation
        Model.ToggleActivation();

        // Toggle role permissions activations
        Model.RolePermissions.ForEach(x =>
        {
            if (x.IsActive != Model.IsActive)
                x.ToggleActivation();
        });

        //  Notify parent that this role changed
        OnActivationChanged.InvokeAsync();
    }

    private void OnShowPermissionsHandler()
    {
        // Display permissions
        OnShowPermissions.InvokeAsync(Model);

        // Activate the clicked one
        Model.IsSelected = true;
    }

    private string GetVariantActiveCard() => Model.Name switch
    {
        RoleDefinition.Receptionist => "active-card-primary",
        RoleDefinition.Radiologist => "active-card-secondary",
        RoleDefinition.Accountant => "active-card-tertiary",
        _ => "active-card-primary"
    };

}
