@using EGHeals.Components.Components.Shared.Modals.Contexts
@using EGHeals.Components.Security
@using EGHeals.Models.Dtos.Users.Requests
@using System.Text.Json
@using System.Security.Cryptography
@using System.Text

@inject TaskHandlerService TaskHandlerService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<EditForm Model="User" OnValidSubmit="OnValidSubmitHandler">
    <DataAnnotationsValidator />
    <VerticalAlignmentWrapper>
        <TextInputUI FontAwesomeIcon="fa-solid fa-user" Label="Username*" Placeholder="Enter your username" @bind-Value="User.Username" ValidationFor="@(() => User.Username)" />
        <PasswordInputUI FontAwesomeIcon="fa-solid fa-lock-keyhole" Label="Password*" Placeholder="Enter your password" @bind-Value="User.Password" ValidationFor="@(() => User.Password)" />
        <PasswordInputUI FontAwesomeIcon="fa-solid fa-lock-keyhole" Label="Confirm Password*" Placeholder="Confirm your password" @bind-Value="User.ConfirmPassword" ValidationFor="@(() => User.ConfirmPassword)" />
        <MainButtonUI Icon="fa-solid fa-plus-large" Class="mt-3" IsSubmit="true">Add</MainButtonUI>
    </VerticalAlignmentWrapper>
</EditForm>

@code
{
    private AddSubUserRequestDto User = new();

    [CascadingParameter] public ModalContext Modal { get; set; } = default!;

    private async Task OnValidSubmitHandler()
    {
        await TaskHandlerService.RunAsync(async () =>
        {
            await Task.Delay(1000);
        },
        setLoading: Modal.StartLoading,
        stopLoading: Modal.StopLoading,
        // setError: Modal.SetError,
        SuccessMsg : "Done",
        setSuccess: Modal.SetSuccess);

        //user authorization

        // var json = JsonSerializer.Serialize(User);

        // var data = Convert.ToBase64String(Encoding.UTF8.GetBytes(json));

        // NavigationManager.NavigateTo($"/user-roles?data={Uri.EscapeDataString(data)}");

        // Modal?.Close?.Invoke(true);

        // var result = await TaskHandlerService.RunAsync<EGResponse<UserResponseDto>>(async () =>
        // {
        //     var command = new LoginCommand(new LoginUserDto(User.Username, User.Password));

        //     var response = await sender.Send(command);

        //     var result = response.Adapt<EGResponse<UserResponseDto>>();

        //     return result;
        // },
        // setLoading: Modal.StartLoading,
        // stopLoading: Modal.StopLoading,
        // setError: Modal.SetError);

        // //user authorization
        // if (result is not null && result.Success)
        // {
        //     // Notify Blazor
        //     (AuthStateProvider as CustomAuthStateProvider)?.NotifyUserAuthentication(result.Data);

        //     Modal.Close();
        // }
    }
}