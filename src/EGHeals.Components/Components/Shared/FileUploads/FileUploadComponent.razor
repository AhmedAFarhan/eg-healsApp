@inject IJSRuntime jSRuntime
@inject ModalPopupService ModalPopupService
@inject TaskHandlerService TaskHandlerService
@inject GlobalExceptionService GlobalExceptionService

<div class="file-card">
    <label class="file-card__label" for="@inputId">
        @if (isImage)
        {
            <img class="file-card__img" src="@previewFile" alt="Preview" @onload="OnImageLoaded" @onerror="OnImageError" />
        }
        else
        {
            <span class="file-card__icon"><i class="fa-light fa-arrow-up"></i></span>
            <span class="file-card__title">@Title</span>
            <span class="file-card__desc">Please upload a file up to @MaxFileSizeMB MB</span>
            @if (!string.IsNullOrEmpty(fileName))
            {
                <span class="file-card__file">@fileName</span>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <span class="file-card__err">@errorMessage</span>
            }
        }
    </label>
    <input class="file-card__input" id="@inputId" type="file" accept="image/*" @onchange="OnInputFileChange" />
    @if (!string.IsNullOrEmpty(previewFile))
    {
        <IconButtonUI OnClick="OnDeleteFileHandler" Icon="fa-solid fa-trash-xmark" Color="AppColors.TERTIARY" Size="2" Class="file-card__delete" />
    }
    @if (isLoading)
    {
        <BarLoading />
    }
</div>

@code {

    private string inputId = $"file-input-{Guid.NewGuid()}";
    private bool isLoading = false;
    private string? previewFile = string.Empty;
    private string? fileName = string.Empty;
    private string? errorMessage = string.Empty;
    private bool isImage => !string.IsNullOrEmpty(previewFile) && (previewFile.StartsWith("data:image") 
                                                                  || previewFile.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) 
                                                                  || previewFile.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase)
                                                                  || previewFile.EndsWith(".png", StringComparison.OrdinalIgnoreCase));

    [Parameter] public string Title { get; set; } = "Select a file";

    // Allowed file types (e.g. "image/*,.pdf,.xlsx")
    [Parameter] public string Accept { get; set; } = "*/*";

    [Parameter] public int MaxFileSizeMB { get; set; } = 2;

    [Parameter] public EventCallback<string> OnFileUploaded { get; set; }

    [Parameter] public string? InitialFile { get; set; }

    private async Task OnInputFileChange(ChangeEventArgs e)
    {
        //Reset data
        errorMessage = string.Empty;
        previewFile = string.Empty;
        fileName = string.Empty;

        //Load data
        var result = await TaskHandlerService.RunAsync<(long fileSize, string? base64, string? fileName)>(async () =>
        {
            // Get file size
            var fileSize = await jSRuntime.InvokeAsync<long>("fileUploader.getFileSize", inputId);

            // Get base64 content
            var base64 = await jSRuntime.InvokeAsync<string>("fileUploader.readFileAsBase64", inputId);

            // Get file name
            var fileName = await jSRuntime.InvokeAsync<string>("fileUploader.getFileName", inputId);

            (long fileSize, string? base64, string? fileName) result = (fileSize, base64, fileName);

            return result;
        },
        setLoading: () => isLoading = true,
        stopLoading: () => isLoading = false,
        setError: GlobalExceptionService.Handle);

        // Check file size        
        if (result.fileSize > MaxFileSizeMB * 1024 * 1024)
        {
            errorMessage = $"File size should be {MaxFileSizeMB}MB max.";
            return;
        }

        if (string.IsNullOrEmpty(result.base64))
        {
            errorMessage = "Failed to read file.";
            return;
        }

        // Get file name
        fileName = result.fileName;

        previewFile = result.base64;

        // Notify parent
        //await OnFileUploaded.InvokeAsync(base64);
    }

    private void OnImageLoaded()
    {
        isLoading = false;
    }

    private void OnImageError()
    {
        isLoading = false;
        errorMessage = "Failed to load image";
    }

    private void OnDeleteFileHandler()
    {
        previewFile = string.Empty;
        fileName = string.Empty;
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(InitialFile) && string.IsNullOrEmpty(previewFile))
        {
            // Initialize with existing file
            isLoading = true;
            previewFile = InitialFile;
        }
    }
}