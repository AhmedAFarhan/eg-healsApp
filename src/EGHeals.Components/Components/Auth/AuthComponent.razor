@using EGHeals.Models.Enums
@inject ModalPopupService ModalPopupService
@inject TaskHandlerService TaskHandlerService
@inject LoadingService LoadingService
@inject GlobalExceptionService GlobalExceptionService
@inject MessageBoxService MessageBoxService

<div class="auth">
    <div class="auth__side auth__side--left">
        <div class="logo-content">
            <EGHealsLogoComponent />
        </div>
        <div class="auth__desc">
            <h1>
                <span class="auth__healthcare">Healthcare </span>
                <span>App</span>
            </h1>
            <h3>Integrated Platform for Medical Operations</h3>
            <p>Our healthcare platform is designed to create a connected, technology-driven medical community. Whether you manage a medical center, clinic, laboratory, or pharmacy, this system helps you streamline operations, improve efficiency, and stay connected with patients and partners. By subscribing, you can easily manage your daily activities while benefiting from powerful features that simplify workflows and enhance the overall healthcare experience.</p>
            <MainButtonUI OnClick="OnLoginHandler" Class="auth__btn">Login</MainButtonUI>
@*             <MainButtonUI OnClick="OnTestHandler2" Class="auth__btn">Login2</MainButtonUI> *@
        </div>
        <div class="auth__ribbon">
            <div class="auth__ribbon-container">
                <div class="auth__circle"></div>
                <div class="auth__circle"></div>
                <div class="auth__circle"></div>
                <div class="auth__circle"></div>
                <div class="auth__circle"></div>
                <div class="auth__circle"></div>
                <div class="auth__circle"></div>
                <div class="auth__circle"></div>
                <div class="auth__circle"></div>
                <div class="auth__circle"></div>
            </div>
        </div>
    </div>
    <div class="auth__side auth__side--right">
        <div class="auth__solid-circle"></div>
        <div class="auth__outer-circle"></div>
        <div class="auth__inner-circle"></div>
        <div class="auth__img-container">
            <GlassWrapperUI Class="auth__icon auth__icon--clinic">
                <StethoscopeIcon ContainerClass="svg-icon-container" PathClass="svg-icon-path" />
            </GlassWrapperUI>
            <GlassWrapperUI Class="auth__icon auth__icon--radiology">
                <RadiologyScannerIcon ContainerClass="svg-icon-container" PathClass="svg-icon-path" />
            </GlassWrapperUI>
            <GlassWrapperUI Class="auth__icon auth__icon--lab">
                <LaboratoryIcon ContainerClass="svg-icon-container" PathClass="svg-icon-path" />
            </GlassWrapperUI>
            <GlassWrapperUI Class="auth__icon auth__icon--pharmacy">
                <PharmacyIcon ContainerClass="svg-icon-container" PathClass="svg-icon-path" />
            </GlassWrapperUI>
            <div class="auth__img-content">
                <img src="_content/EGHeals.Components/assets/images/egheals-img.jpg" />
            </div>
        </div>
        <div class="auth__plus auth__plus--1"><i class="fa-sharp fa-solid fa-plus"></i></div>
        <div class="auth__plus auth__plus--2"><i class="fa-sharp fa-solid fa-plus"></i></div>
    </div>
</div>

@code {

    private void OnLoginHandler()
    {
        ModalPopupService.Show(builder =>
        {
            builder.OpenComponent<LoginUserFormComponent>(0);
            builder.CloseComponent();
        }, "Welcome back!", "Please login to continue to your dashboard");
    }

    private async Task OnTestHandler()
    {
        // await TaskHandlerService.RunAsync(async () =>
        // {
        //     await Task.Delay(3000);
        //     // throw new AppException("Server Error", 500, new List<string> { "Something went wrong" });
        // }, 
        // setLoading: LoadingService.Show,
        // stopLoading: LoadingService.Hide,
        // setError: GlobalExceptionService.Handle);
    }

    private async Task OnTestHandler2()
    {
        var x = await MessageBoxService.ShowAsync(title: "Test",
                            description: "Test",
                            msgBoxType: MsgBoxType.ERROR,
                            btnText: "Ok");

        if (x)
        {

        }

        var cc = 0;
    }

    private void OnTestHandler3()
    {
        // throw new AppException(string.Empty, 500, new List<string> { "Something went wrong" });
    }

}