@using EGHeals.Components.Components.Shared.Modals.Contexts
@using EGHeals.Components.Security
@using EGHeals.Models.Dtos.Users.Requests
@using EGHeals.Models.Dtos.Users.Responses
@using EGHeals.Services.Responses

@inject TaskHandlerService TaskHandlerService
@inject AuthenticationStateProvider AuthStateProvider
@inject EGService EGService;

<EditForm Model="User" OnValidSubmit="OnValidSubmitHandler">
   <DataAnnotationsValidator/>
   <VerticalAlignmentWrapper>
        <TextInputUI FontAwesomeIcon="fa-solid fa-user" Label="Username*" Placeholder="Enter your username" @bind-Value="User.Username" ValidationFor="@(() => User.Username)" />
        <PasswordInputUI FontAwesomeIcon="fa-solid fa-lock-keyhole" Label="Password*" Placeholder="Enter your password" @bind-Value="User.Password" ValidationFor="@(() => User.Password)" />
        <MainButtonUI Class="mt-3" IsSubmit="true">Login</MainButtonUI>
    </VerticalAlignmentWrapper>
</EditForm>

@code
{
    private LoginUserRequestDto User = new();

    [CascadingParameter] public ModalContext Modal { get; set; } = default!;

    private async Task OnValidSubmitHandler()
    {
        var result = await TaskHandlerService.RunAsync<string>(async () =>
        {
            return await EGService.PostAsync<string, LoginUserRequestDto>("api/users/login", User);
        }, 
        onStart: Modal.StartLoading,
        onFinish: Modal.StopLoading);

        //user authorization
        if (!result.Success)
        {
            Modal.SetError?.Invoke(result.Errors);
            return;
        }

        // Notify Blazor the user is authenticated
        (AuthStateProvider as CustomAuthStateProvider)?.NotifyUserAuthentication(result.Data);

        Modal?.Close?.Invoke(true);
    }
}