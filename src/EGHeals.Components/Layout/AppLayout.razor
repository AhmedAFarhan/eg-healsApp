@using System.Globalization
@using EGHeals.Components.Components.Shared.Modals
@using EGHeals.Components.Components.Shared.Navigations
@using EGHeals.Components.Components.Shared.SplashScreen
@using EGHeals.Models.Enums
@using EGHeals.Services.Exceptions

@inject ModalPopupService ModalPopupService
@inject LoadingService LoadingService
@inject GlobalExceptionService GlobalExceptionService
@inject AuthenticationStateProvider AuthStateProvider
@inject MessageBoxService MessageBoxService

<ErrorBoundary @ref="currentErrorBoundary">
    <ErrorContent Context="error">
        <ErrorBoundaryModalComponent CurrentErrorBoundary="currentErrorBoundary" Exception="error" />
    </ErrorContent>
    <ChildContent>
        @if (!isAppReady)
        {
            <SplashScreen OnCompleted="HandleInitializationCompleted" />
        }
        else
        {
            <div class="layout @PageCssClass @(isModalPopupActive ? "blurred" : string.Empty)" dir="@dir">
                <AuthorizeView>
                    <Authorized>
                        <MainNavMenuComponent />
                        <SectionNavMenuComponent />
                    </Authorized>
                </AuthorizeView>
                <main class="scrollable-content @PageCssClass">
                    @ChildContent
                    @if (isLoading)
                    {
                        <BarLoading IsCentralized="true" Color="ApplicationColor.SECONDARY" IsOverlayed="true" />
                    }
                </main>
            </div>
        }
        <ModalComponent />
    </ChildContent>
</ErrorBoundary>

@code{

    private bool isAppReady = false;

    private bool isModalPopupActive = false;

    private bool isLoading = false;

    private string dir = string.Empty;

    private bool IsAuthenticated { get; set; }

    private string PageCssClass => IsAuthenticated ? "authorized" : string.Empty;

    private ErrorBoundary? currentErrorBoundary;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    [CascadingParameter] 
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private void HandleInitializationCompleted()
    {
        isAppReady = true;
        StateHasChanged();
    }

    private void OnBlurChangedHandler(bool state)
    {
        isModalPopupActive = state;
        StateHasChanged();
    }

    private void OnLoadingChangedHandler(bool state)
    {
        isLoading = state;
        StateHasChanged();
    }

    private void OnExceptionHandler(string errTitle, string errMsg)
    {
        // if (ex is null) return;

        MessageBoxService.ShowAsync(title: errTitle,
                                    description: errMsg,
                                    msgBoxType: MsgBoxType.ERROR,
                                    btnText: "Ok");
    }

    private void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        InvokeAsync(async () =>
        {
            var authState = await task;
            UpdateAuthenticationState(authState);
            StateHasChanged();
        });
    }

    private void UpdateAuthenticationState(AuthenticationState authState)
    {
        IsAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
    }

    protected override async Task OnInitializedAsync()
    {
        ModalPopupService.OnStateChanged += OnBlurChangedHandler;

        LoadingService.OnStateChanged += OnLoadingChangedHandler;

        GlobalExceptionService.OnException += OnExceptionHandler;

        AuthStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Set direction based on culture
        var culture = CultureInfo.CurrentUICulture.Name;
        dir = culture.StartsWith("ar") ? "rtl" : "ltr";

        // Check authentication state
        var authState = await AuthenticationStateTask;

        UpdateAuthenticationState(authState);
    }
}