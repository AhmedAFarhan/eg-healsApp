@using BuildingBlocks.DataAccessAbstraction.Queries
@using BuildingBlocks.Pagination
@using EGHeals.Application.Features.Users.Queries.GetSubUsersByOwnership
@using EGHeals.Domain.Models
@using EGHeals.Models.Dtos.Users

@inject TaskHandlerService TaskHandlerService
@inject GlobalExceptionService GlobalExceptionService
@inject ISender sender

<PageUI>
    <div class="user-page">
        <SkeltonLoadingContainer IsLoading="isInit">
            <Skeleton>
                <MainButtonSkeletonUI />
            </Skeleton>
            <ChildContent>
                <MainButtonUI Class="user-page__add-btn">New User</MainButtonUI>
            </ChildContent>
        </SkeltonLoadingContainer>        
        <UserListComponent Users="users"/>
        <SkeltonLoadingContainer IsLoading="isInit">
            <Skeleton>
                <PaginationSkeletonUI />
            </Skeleton>
            <ChildContent>
                <PaginationUI TotalPages="@totalPages" Page="1" />
            </ChildContent>
        </SkeltonLoadingContainer>
    </div>
</PageUI>

@code{

    private bool isInit = false;
    private long totalPages = 0;
    private IEnumerable<SubUserResponseDto> users = default!;

    protected override async Task OnInitializedAsync()
    {
        var result = await TaskHandlerService.RunAsync<EGResponse<PaginatedResult<SubUserResponseDto>>>(async () =>
        {
            //var query = new GetSubUsersByOwnershipQuery(new PaginationRequest());
            var query = new GetSubUsersByOwnershipQuery(new QueryOptions<SystemUser>());

            var response = await sender.Send(query);

            var result = response.Adapt<EGResponse<PaginatedResult<SubUserResponseDto>>>();

            return result;
        },
        setLoading: () => isInit = true,
        stopLoading: () => isInit = false,
        setError: GlobalExceptionService.Handle);

        if (result is not null && result.Success)
        {
            users = result.Data.Data;
            var count = result.Data.Count;
            var pageSize = result.Data.PageSize;
            totalPages = (long)Math.Ceiling(count / (double)pageSize);
        }        
    }
}