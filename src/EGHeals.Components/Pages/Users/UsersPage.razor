@using EGHeals.Models.Dtos.Users.Responses
@inject TaskHandlerService TaskHandlerService
@inject ModalPopupService ModalPopupService
@inject GlobalExceptionService GlobalExceptionService


<PageUI>
    <div class="page-content">
        <SkeltonLoadingContainer IsLoading="isInit">
            <Skeleton>
                <MainButtonSkeletonUI />
            </Skeleton>
            <ChildContent>
                <MainButtonUI Icon="fa-solid fa-plus-large" OnClick="OnAddingUserHandler" Class="page-content__add-btn">New User</MainButtonUI>
            </ChildContent>
        </SkeltonLoadingContainer>        
        <UserListComponent Users="users"/>
        <SkeltonLoadingContainer IsLoading="isInit">
            <Skeleton>
                <PaginationSkeletonUI />
            </Skeleton>
            <ChildContent>
                <PaginationUI TotalPages="@totalPages" Page="1" />
            </ChildContent>
        </SkeltonLoadingContainer>
    </div>
</PageUI>

@code{

    private bool isInit = false;
    private long totalPages = 0;
    private List<SubUserResponseDto> users = default!;

    protected override async Task OnInitializedAsync()
    {
        // var result = await TaskHandlerService.RunAsync<EGResponse<PaginatedResult<SubUserResponseDto>>>(async () =>
        // {
        //     //var query = new GetSubUsersByOwnershipQuery(new PaginationRequest());
        //     var query = new GetSubUsersByOwnershipQuery(new QueryOptions<SystemUser>());

        //     var response = await sender.Send(query);

        //     var result = response.Adapt<EGResponse<PaginatedResult<SubUserResponseDto>>>();

        //     return result;
        // },
        // setLoading: () => isInit = true,
        // stopLoading: () => isInit = false,
        // setError: GlobalExceptionService.Handle);

        // if (result is not null && result.Success)
        // {
        //     users = result.Data.Data.ToList();
        //     var count = result.Data.Count;
        //     var pageSize = result.Data.PageSize;
        //     totalPages = (long)Math.Ceiling(count / (double)pageSize);
        // }        
    }

    private async Task OnAddingUserHandler()
    {
        var x = await ModalPopupService.ShowDialog<bool>(builder =>
        {
            builder.OpenComponent<AddNewSubUserFormComponent>(0);
            builder.CloseComponent();
        }, "Create Sub-User", "Add a new sub-user to your account.");

        if (x)
        {
            
        }
    }
}