@using EGHeals.Models.Dtos.Roles.Reponses
@using EGHeals.Models.Dtos.Users
@using EGHeals.Models.Dtos.Users.Requests
@using EGHeals.Models.Dtos.Users.Responses
@using EGHeals.Models.Enums
@using EGHeals.Models.Models.Users
@* @using Microsoft.AspNetCore.WebUtilities *@
@using System.Security.Cryptography
@using System.Text.Json
@using System.Text

@inject GlobalExceptionService GlobalExceptionService
@inject TaskHandlerService TaskHandlerService
@inject NavigationManager NavigationManager
@inject MessageBoxService MessageBoxService


<PageUI>
    <div class="roles-page">
        <MainButtonUI Icon="fa-solid fa-backward-step" Class="roles-page__back-btn" OnClick="@OnNavigateBackToUsersHandler">Back To Users</MainButtonUI>

        <div class="roles-page__info">
            @if (subUser is not null)
            {
                <div class="roles-page__info-text">@subUser.Username</div>
            }
            @if (!string.IsNullOrEmpty(displayedRolePermissions))
            {
                <div class="roles-page__info-text">@displayedRolePermissions</div>
            }
        </div>    
        
        <RolesListComponent Roles="roles"
                            OnShowPermissions="OnPermissionListChangedHandler"
                            OnActivationChanged="TriggerUIRefresh"
                            Class="roles-page__grid"
                            ContainerClass="roles-page__grid-container" />

        <RolePermissionsListComponent Permissions="rolePermissions"
                                      OnActivationChanged="TriggerUIRefresh"
                                      OnGetRole="GetRolePermissionHandler" 
                                      Class="roles-page__grid" 
                                      ContainerClass="roles-page__grid-container" 
                                      DisableTransition="@isSwitchingPermissions" />

        <MainButtonUI Icon="fa-solid fa-cloud-arrow-up" OnClick="OnSaveHandlerAsync" Class="roles-page__save-btn">Save</MainButtonUI>
    </div>
</PageUI>

@code{

    private bool isInit = false;
    private UserResponseDto subUser = default!;
    private List<RoleModel> roles = default!;
    private List<RolePermissionModel> rolePermissions = default!;
    private string displayedRolePermissions = string.Empty;
    private bool isSwitchingPermissions = false;

    [Parameter] public Guid? UserId { get; set; }

    private void TriggerUIRefresh() => StateHasChanged();

    private RoleModel GetRolePermissionHandler(RolePermissionModel permission) => roles.First(r => r.RolePermissions.Contains(permission));

    private void OnNavigateBackToUsersHandler() => NavigationManager.NavigateTo("/users");

    private List<RoleModel> MapDefinedRolesToModels(IEnumerable<RoleResponseDto> definedRoles, IEnumerable<UserRoleResponseDto>? userRoles = null)
    {
        return definedRoles.Select(r =>
        {
            // Try to find matching user role
            var matchedUserRole = userRoles?.FirstOrDefault(ur => ur.RoleId == r.Id);

            return new RoleModel
            {
                Id = r.Id,
                UserRoleId = matchedUserRole?.Id ?? Guid.Empty,
                Name = r.Name,
                IsActive = matchedUserRole?.Id is null ? false : true,
                ActivationBtnText = matchedUserRole?.Id is null ? "Activate" : "Deactivate",
                ActivationBtnIcon = matchedUserRole?.Id is null ? "fa-sharp fa-solid fa-lightbulb-on" : "fa-sharp fa-solid fa-lightbulb-slash",
                RolePermissions = r.RolePermissions.Select(p =>
                {
                    // Try to find matching permission in that user role
                    var matchedUserRolePermission = matchedUserRole?.UserRolePermissions?.FirstOrDefault(urp => urp.RolePermissionId == p.Id);

                    return new RolePermissionModel
                    {
                        Id = p.Id,
                        UserRolePermissionId = matchedUserRolePermission?.Id ?? Guid.Empty,
                        Name = p.PermissionName,
                        RoleName = r.Name,
                        IsActive = matchedUserRolePermission?.Id is null ? false : true,
                    };
                }).ToList()
            };
        }).ToList();
    }

    private async void OnPermissionListChangedHandler(RoleModel model)
    {
        // this flag is important to stopping transition of icon flipping during changing the permissions
        isSwitchingPermissions = true;
        StateHasChanged();

        // Reset all roles' selection
        roles.ForEach(r => r.IsSelected = false);

        // Show permissions list
        rolePermissions = model.RolePermissions;
        displayedRolePermissions = model.Name;

        await Task.Delay(10);

        //enable flipping transition again
        isSwitchingPermissions = false;
    }

    private static AddSubUserRequestDto? DecodeUserFromQuery(string encoded)
    {
        var bytes = Convert.FromBase64String(encoded);
        var json = Encoding.UTF8.GetString(bytes);
        return JsonSerializer.Deserialize<AddSubUserRequestDto>(json);
    }

    // private Task<EGResponse<UserResponseDto>?> GetUserRolesAndPermissionsAsync()
    // {
    //     return TaskHandlerService.RunAsync<EGResponse<UserResponseDto>>(async () =>
    //     {
    //         var query = new GetSubUserRolesByOwnershipQuery(UserId.Value);

    //         var response = await sender.Send(query);

    //         var result = response.Adapt<EGResponse<UserResponseDto>>();

    //         return result;
    //     },
    //     setLoading: () => isInit = true,
    //     stopLoading: () => isInit = false,
    //     setError: GlobalExceptionService.Handle);
    // }

    // private Task<EGResponse<IEnumerable<RoleResponseDto>>?> GetDefinedRolesAndPermissionsAsync()
    // {
    //     return TaskHandlerService.RunAsync<EGResponse<IEnumerable<RoleResponseDto>>>(async () =>
    //     {
    //         var query = new GetRolesQuery();

    //         var response = await sender.Send(query);

    //         var result = response.Adapt<EGResponse<IEnumerable<RoleResponseDto>>>();

    //         return result;
    //     },
    //     setLoading: () => isInit = true,
    //     stopLoading: () => isInit = false,
    //     setError: GlobalExceptionService.Handle);
    // }

    private async Task InitializeForNewUserAsync(string encodedData)
    {
        // var user = DecodeUserFromQuery(encodedData);

        // //Get defined system roles and permissions
        // var definedRolesAndPermissionsResult = await GetDefinedRolesAndPermissionsAsync();

        // if (definedRolesAndPermissionsResult is not null && definedRolesAndPermissionsResult.Success)
        // {
        //     var definedRoles = definedRolesAndPermissionsResult.Data;
        //     roles = MapDefinedRolesToModels(definedRoles);
        //     var firstRole = roles.First();
        //     firstRole.IsSelected = true;
        //     rolePermissions = firstRole.RolePermissions;
        //     displayedRolePermissions = firstRole.Name;
        // }

        // //Show popup telling admin to select the sub user roles
        // _= MessageBoxService.ShowAsync(title: "User Role Configuration",
        //                                description: "Please select the user roles and permissions.",
        //                                msgBoxType: MsgBoxType.INFO,
        //                                btnText: "Ok");
    }

    private async Task InitializeForExistingUserAsync()
    {
        // var UserRolesAndPermissionsResult = await GetUserRolesAndPermissionsAsync();// await getUserRolesAndPermissionsTask;
        // var definedRolesAndPermissionsResult = await GetDefinedRolesAndPermissionsAsync();// await getDefinedRolesAndPermissionsTask;

        // if ((UserRolesAndPermissionsResult is not null && UserRolesAndPermissionsResult.Success)
        //     && (definedRolesAndPermissionsResult is not null && definedRolesAndPermissionsResult.Success))
        // {
        //     subUser = UserRolesAndPermissionsResult.Data;
        //     var subUserRoles = subUser.UserRoles;

        //     var definedRoles = definedRolesAndPermissionsResult.Data;
        //     roles = MapDefinedRolesToModels(definedRoles, subUserRoles);

        //     rolePermissions = roles.First().RolePermissions;
        //     displayedRolePermissions = roles.First().Name;
        // }
    }

    private async Task OnSaveHandlerAsync()
    {
        var savedRoles = roles;
    }

    protected override async Task OnInitializedAsync()
    {
        // var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        // var query = QueryHelpers.ParseQuery(uri.Query);

        // //Option 1: Handle encoded query data
        // if (query.TryGetValue("data", out var encoded))
        // {            
        //     await InitializeForNewUserAsync(encoded!);
        // }
        // // Option 2: Handle /user-roles/{guid}
        // else if (UserId.HasValue && UserId != Guid.Empty)
        // {
        //     await InitializeForExistingUserAsync();
        // }
        // // Invalid Data Path
        // else
        // {
        //     GlobalExceptionService.Handle(new AppException("Not Found", 404, new List<string> { "Invalid user data or query." }));
        //     OnNavigateBackToUsersHandler();
        // }
    }
}